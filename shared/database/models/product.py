from decimal import Decimal
from uuid import uuid4

from sqlalchemy import Column, String, NUMERIC, UUID, CheckConstraint
from sqlalchemy.orm import relationship, validates

from shared.database import Base


class Product(Base):
    """
    Represents a product available for sale in the supermarket.

    Each product has a unique identifier, name, and unit price.
    Products can be purchased multiple times and are tracked through purchase items.

    Attributes:
        id: Unique identifier for the product
        product_name: Name of the product (must be unique)
        unit_price: Price per unit of the product
        purchase_items: List of purchase items for this product
    """
    __tablename__ = "products"

    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        index=True,
        default=uuid4,
        doc="Unique identifier for the product"
    )
    product_name = Column(
        String,
        unique=True,
        index=True,
        nullable=False,
        doc="Name of the product"
    )
    unit_price = Column(
        NUMERIC,
        nullable=False,
        doc="Price per unit of the product"
    )

    purchase_items = relationship(
        "PurchaseItem",
        back_populates="product",
        doc="List of purchase items for this product"
    )

    __table_args__ = (
        CheckConstraint('unit_price >= 0', name='non_negative_unit_price'),
    )

    def __repr__(self) -> str:
        """Return a string representation of the product."""
        return f"<Product id={self.id} name={self.product_name} price={self.unit_price}>"

    def get_total_sold(self) -> int:
        """
        Calculate and return the total number of units sold for this product.

        Returns:
            int: Total number of units sold
        """
        return sum(pi.quantity for pi in self.purchase_items)

    def get_total_revenue(self) -> float:
        """
        Calculate and return the total revenue generated by this product.

        Returns:
            float: Total revenue
        """
        return sum(float(pi.unit_price * pi.quantity) for pi in self.purchase_items)

    @validates('unit_price')
    def validate_unit_price(self, key: str, price: float) -> Decimal:
        """
        Validate that unit price is positive.

        Args:
            key: The column name being validated
            price: The price value to validate

        Returns:
            Decimal: The validated price

        Raises:
            ValueError: If the price is negative
        """
        if isinstance(price, str):
            price = Decimal(price)
        elif isinstance(price, float):
            price = Decimal(str(price))
        if price < 0:
            raise ValueError("Unit price must be non-negative")
        return price

    @validates('product_name')
    def validate_product_name(self, key: str, name: str) -> str:
        """
        Validate product name is not empty.

        Args:
            key: The column name being validated
            name: The product name to validate

        Returns:
            str: The validated product name

        Raises:
            ValueError: If the product name is empty
        """
        if not name or not name.strip():
            raise ValueError("Product name cannot be empty")
        return name.strip()
